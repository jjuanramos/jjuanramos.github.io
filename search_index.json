[
["desarrollo-de-la-aplicación-en-shiny.html", "3.5 Desarrollo de la aplicación en Shiny", " 3.5 Desarrollo de la aplicación en Shiny A continuación ilustraremos, sin entrar en un gran nivel de detalle, el proceso de desarrollo de la aplicación en Shiny. Para los que deseen una mayor comprensión del proyecto, el código completo está disponible en la sección 7.2 Desarrollo de la aplicación en Shiny. El desarrollo de una aplicación de Shiny, al igual que el desarrollo de una ETL Pipeline, se puede dividir en diferentes partes. Por lo general, estas secciones son: Carga de librerías. Creación de funciones. Carga y transformación de los datos. Desarrollo de la interfaz de usuario. Desarrollo de los gráficos y de la reactividad (servidor). Siendo todavía más concisos, lo esencial de una aplicación Shiny es la interfaz de usuario y el servidor, ui y server. Con estos dos componentes somos capaces de desarrollar una aplicación de Shiny. El código que se muestra a continuación es todo lo que necesitamos. library(shiny) ui &lt;- fluidPage( titlePanel(&quot;¡Hola Mundo!&quot;), mainPanel( plotOutput(&quot;distPlot&quot;) ) ) server &lt;- function(input, output) { output$distPlot &lt;- renderPlot({ x &lt;- faithful[, 2] bins &lt;- seq(min(x), max(x), length.out = 10) hist(x, breaks = bins) }) } shinyApp(ui = ui, server = server) Como podemos ver de forma intuitiva mediante el código, a través de ui indicamos dónde vamos a colocar los componentes de nuestra aplicación. En el ejemplo, estamos señalando cómo queremos añadir el gráfico “distPlot” al panel principal, mainPanel. Será en server donde desarrollemos este gráfico, siempre añadiendo el prefijo output$ al nombre del componente, ya que queremos que su resultado se muestre en la ui al usuario. 3.5.1 Carga de librerías Para empezar, cargamos en memoria las librerías que vamos a utilizar en la aplicación. Podemos agrupar estas librerías en tres categorías: Relacionadas con la visualización de datos. Estas serían plotly (gráficos interactivos), leaflet (mapas interactivos), leaflet.extras (añade funcionalidad a leaflet) y DT (tablas interactivas). Hemos decidido incluir aquí tidyverse, que es en sí misma una agrupación de las librerías más utilizadas, ya que contiene ggplot2, la librería para gráficos externa de R más conocida, aunque también contiene librerías de transformación de datos como dplyr. Relacionadas con Shiny. Aquí tendríamos shiny, shinymanager (permite añadir usuario y contraseña a la aplicación), shinyWidgets (extiende la variedad de widgets que contiene shiny por defecto), shinydashboard (añade una capa de abstracción que permite crear aplicaciones organizadas y estéticamente agradables de forma sencilla) y shinycssloaders (añade animaciones de carga a los gráficos). Relacionadas con la carga (y transformación) de datos. Para esta agrupación tenemos rdrop2 (extraemos datos de Dropbox), sf (convertimos el Shapefile de los distritos en información gestionable) y lubridate (para tratar información relacionada con fechas). 3.5.2 Creación de funciones En lo que a funciones se refiere, crearemos 4 (y una variable) que también pueden ser subdivididas: Utilizaremos toMoney y toPercentage para transformar variables numéricas en variables asociadas a dinero (_ de 5.0 a 5.0€ ) y porcentaje ( de 0.5 a 50% _), respectivamente. Su propósito será estético, ya que únicamente cambiará cómo el usuario ve esa información. loadHeatmap, función que utilizaremos para cargar el mapa de calor, y actualizarlo cada vez que seleccionamos una variable diferente sobre la que basarnos a la hora de colorear los distritos. lang y credentials son funciones asociadas con la pantalla de autentificación del usuario. En lang modificaremos el texto que verá el usuario al abrir la aplicación, credentials establece el usuario y contraseña necesarios para poder acceder a la aplicación. Figura 3.2: Pantalla de autentificación para acceder a la aplicación. 3.5.3 Carga y transformación de los datos En esta etapa de la aplicación nos encargamos de cargar todos los datos de los que vamos a hacer uso, así como transformarlos para poder explotarlos de la manera que deseamos. Cabe señalar que la transformación aquí es mínima, y normalmente consiste en añadir variables que necesitan de agrupaciones dinámicas, etc. La parte más extensa de transformación de datos es delegada, como ya bien sabemos, a la ETL Pipeline. Una vez los datos ya han sido cargados y transformados, estamos listos para empezar a desarrollar los componentes principales de la aplicación. 3.5.4 Desarrollo de la interfaz de usuario El desarrollo de la interfaz de usuario consiste en diseñar cómo el usuario va a comunicarse con el producto que quieres desarrollar, en nuestro caso la aplicación. Hemos optado por desarrollar una interfaz sencilla, con los filtros disponibles en una columna desplegable a la izquierda, dejando en la pantalla principal únicamente los gráficos interactivos. Para ello, hacemos uso de la librería shinydashboard y sus funciones dashboardPage (aplicación en sí), dashboardHeader (aquí introduciremos el logo de homyspace), dashboardBody (en esta función introduciremos los gráficos) y dashboardSidebar (aquí insertaremos los filtros). title &lt;- tags$a(href=&quot;homyspace.com&quot;, tags$img(src=&quot;http://homybrain.com/img/logo.png&quot;, width = &quot;200&quot;)) ui &lt;- secure_app( theme = shinythemes::shinytheme(&quot;flatly&quot;), dashboardPage( title = &quot;homyspace&quot;, dashboardHeader(title = title), dashboardSidebar( ), dashboardBody( tags$head(tags$style(HTML(&#39; .skin-blue .main-header .logo { font-family: &quot;Nexa Bold&quot;; font-size: 24px; color: #000000; background-color: #eeaf30; } /* navbar (rest of the header) */ .skin-blue .main-header .navbar { background-color: #eeaf30; color: #000000; } &#39;))), ) ) ) Con una estructura de la ui o User Interface (interfaz de usuario en inglés) como esta, logramos esta plantilla: Figura 3.3: Plantilla de las aplicaciones shiny utilizadas en homyspace. Una vez establecida la plantilla, iremos rellenando cada una de sus partes con los componentes que deseemos. 3.5.5 Desarrollo de los gráficos y de la reactividad Debido al carácter técnico de esta sección nos vamos a centrar no tanto en el desarrollo en sí, sino en diferentes consejos y pautas a seguir a la hora de realizar una aplicación en Shiny. Seguimos una metodología basada en prueba y error. Cada vez que desarrollamos un nuevo componente, lo testeamos inmediatamente. Del mismo modo, cuando creamos un sistema de reactividad entre diferentes componentes de la aplicación, también lo probamos antes de proseguir con el desarrollo del resto de componentes. En este caso, nos planteamos qué escenarios pueden hacer que la aplicación se caiga y los validamos, así como que la reactividad sólo se da entre los componentes que esperamos y no se producen efectos cascada inesperados. Establecemos nombres claros e inteligibles a cada uno de los componentes de la aplicación, tanto en la ui como en el server. Esto nos ayuda a comprender mejor el código, tanto a nosotros mismos como a posibles compañeros que quieran modificarlo o, simplemente, entenderlo mejor. Para aquellos interesados en profundizar más en el desarrollo de un servidor de Shiny para una aplicación utilizada en el mundo real, el código se encuentra en la sección 7.2 Desarrollo de la aplicación en Shiny. 3.5.6 Publicación de la aplicación Una vez desarrollada la aplicación, es necesario publicarla en la web para que esté disponible para el equipo. RStudio nos proporciona un servicio gestionado de calidad llamado shinyapps.io 2 donde alojaremos la aplicación. Para ello nos registraremos en shinyapps.io y nos identificaremos a través de RStudio. Figura 3.4: Pantalla que vemos en el proceso de publicación de la aplicación. Tras haber realizado este paso, ya podemos afirmar que nuestra aplicación está lista para ser lanzada. No obstante, esto es sólo el principio. Una vez ha sido lanzada, tendremos que seguir los pasos indicados en la sección 3.4.1 Métodos para la difusión del uso de la aplicación. Del mismo modo, raramente la primera versión de una aplicación es la definitiva. A través del feedback por parte del usuario objetivo iremos mejorando el contenido de la aplicación, para que cada vez esté más cerca del valor máximo que los gráficos interactivos pueden aportar para la mejora de la calidad de la toma de decisiones. shinyapps.io↩ "],
["aspecto-final.html", "3.6 Aspecto Final", " 3.6 Aspecto Final Como conclusión, mostramos una demo de la aplicación que hemos desarrollado para este proyecto. Para mantener la privacidad de homyspace, hemos eliminado los ejes x e y de todos los gráficos. "]
]
